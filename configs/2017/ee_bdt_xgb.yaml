# Configuration file for ee channel classifier using XGBoost

# Directory containing input files for the classifier. Each file should contain
# Monte Carlo for a process, along with a separate file for the data.
input_dir: /scratch/data/TopPhysics/mvaDirs/inputs/2017/all/mz20mw20/

# Random number generation seed
seed: 777

# ROOT selection string specifying the cuts that should be made before
# classifier training takes place.
selection: >-
    Channel == 1

# channel - prefix for output filenames
channel: ee

# List of processes which should be considered signal
signals:
    - "TZQ"

# List of processes which should be considered background
backgrounds:
    - "TTHbb"
    - "TTHnonbb"
    # - "WWW"
    - "WWZ"
    - "WZZ"
    - "ZZZ"
    - "WW1l1nu2q"
    - "WW2l2nu"
    - "ZZ4l"
    - "ZZ2l2nu"
    - "ZZ2l2q"
    - "WZ3l3nu"
    - "WZ2l2q"
    - "WZ1l1nu2q"
    - "TsChan"
    - "TtChan"
    - "TbartChan"
    - "TW"
    - "TbarW"
    - "THQ"
    - "TTWlnu"
    - "TTW2q"
    - "TTZ2l2nu"
    - "TTZ2q"
    - "TT2l2v"
    - "TTjets"
    - "TT1l1v2q"
    - "TTG"
    - "TWZ"
    - "Wjets"
    - "ZG2l1g"
    - "WG11nu1g"
    - "DYJetsToLLM10to50"
    - "DYJetsToLLM50"
    - "FakeEG"

# Name of process containing collision data
data_process: DataEG

# Directories plots, root files, and trained classifiers should be output into
plot_dir: plots/
root_dir: root/
mva_dir: mva/

# Fraction of data to be reserved in test sample
test_fraction: 0.2

# If true, the weights of the signal channels are linearly scaled so that the
# overall normalisation for both the signal and background channels is the same
equalise_signal: true

# How negative event weights should be treated
#   passthrough: negative weights are unaltered
#   abs: the absolute value of all negative weights is taken
#   reweight: The absolute value of all negative weights is taken. The original
#             normalisation for each process is then restored by linearly
#             scaling the resulting weights down. This will fail if any
#             processes have an overall negative weight.
#   zero: negative weights are set to 0
negative_weight_treatment: passthrough

# Classifier selection
#   bdt_grad: Gradient Boosted Decision Tree (scikit-learn)
#   bdt_xgb: Gradient Boosted Decision Tree (XGBoost)
#   random_forest: Random Forest
#   mlp: Multi-Layer Perceptron (Keras)
#   load: load classfier specfied by classifer_path option
classifier: bdt_xgb
# classifier_path: mva/bdt_xgb_ee.pkl

# BDT configuration. Passed to XGBoost's XGBClassifier()
bdt_xgb:
    n_jobs: 20
    n_estimators: 3250
    silent: False
    subsample: 0.5
    learning_rate: 0.003560640265444458
    max_depth: 2
    min_child_weight: 13.302994678393679
    gamma: 10
    reg_lambda: 2.383050055664031
    reg_alpha: 0.00026197490212487713

# Options governing the root file output
root_out:
    # Whether output should be in the format for combine (true) or THETA (false)
    combine: true

    # What form the (pseudo)-data in the files should take
    # empty: Empty histograms
    # poisson: Sum the Monte Carlo histograms, and perform a Poisson jump on
    #          each bin
    # real: Use the real data
    data: real

    # The strategy used to bin the MVA response in the resulting root files
    #   equal: specified number of equal-width bins in the (0, 1) range
    #          (default).
    #   quantile: specified number of equally-populated bins, achieved by
    #             placing bin edges at quantiles. Bin population does not take
    #             event weight into account.
    #   recursive_median: response is recursively bisected at the median
    #   recursive_kmeans: response is recursively split into two clusters using
    #                     the k-means (Jenks) algorithm
    strategy: recursive_median

    # Set the number of bins for the equal or quantile binning stategies
    bins: 25

    # The recursive binning strategies will stop splitting once these limits
    # are reached
    min_signal_events: 0
    min_background_events: 1
    max_signal_error: 0.1
    max_background_error: 0.1

    # Suffix to be added to bin and systematic names
    suffix: "_2017"

# Features to be included in the classifier training
features:
    - bTagDisc
    - chi2
    # - fourthJetEta
    # - fourthJetPhi
    - fourthJetPt
    # - fourthJetbTag
    # - jetHt
    - jetMass
    # - jetMass3
    # - jjdelPhi
    - jjdelR
    # - leadJetEta
    # - leadJetPhi
    # - leadJetPt
    # - leadJetbTag
    # - lep1D0
    # - lep1Eta
    # - lep1Phi
    # - lep1Pt
    # - lep1RelIso
    # - lep2D0
    # - lep2Eta
    # - lep2Phi
    # - lep2Pt
    # - lep2RelIso
    # - lepEta
    # - mTW
    - met
    # - nBjets
    # - nJets
    # - secJetEta
    # - secJetPhi
    - secJetPt
    # - secJetbTag
    # - thirdJetEta
    # - thirdJetPhi
    # - thirdJetPt
    # - thirdJetbTag
    # - topEta
    # - topMass
    # - topPhi
    # - topPt
    # - totEta
    # - totHt
    - totPt
    # - totPt2Jet
    # - totPtVec
    # - totVecM
    # - w1TopDelPhi
    # - w1TopDelR
    # - w2TopDelPhi
    # - w2TopDelR
    # - wPairEta
    # - wPairMass
    # - wPairPhi
    # - wPairPt
    # - wQuark1Eta
    # - wQuark1Phi
    # - wQuark1Pt
    # - wQuark2Eta
    # - wQuark2Phi
    # - wQuark2Pt
    # - wQuarkHt
    # - wTopDelPhi
    # - wTopDelR
    # - wwdelPhi
    # - wwdelR
    # - wzdelPhi
    - wzdelR
    # - zEta
    # - zLepdelPhi
    # - zLepdelR
    - zMass
    # - zPhi
    - zPt
    # - zQuark1DelPhi
    # - zQuark1DelR
    # - zQuark2DelPhi
    # - zQuark2DelR
    # - zTopDelPhi
    # - zTopDelR
    # - zjminPhi
    # - zjminR
    # - zl1Quark1DelPhi
    # - zl1Quark1DelR
    # - zl1Quark2DelPhi
    # - zl1Quark2DelR
    # - zl1TopDelPhi
    # - zl1TopDelR
    # - zl2Quark1DelPhi
    # - zl2Quark1DelR
    # - zl2Quark2DelPhi
    # - zl2Quark2DelR
    # - zl2TopDelPhi
    # - zl2TopDelR
    # - zlb1DelPhi
    - zlb1DelR
    # - zlb2DelPhi
    # - zlb2DelR
